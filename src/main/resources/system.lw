package system

class Any

class Null Any

class String Any

class Real Any

class Integer Real

class Boolean Any

class Function Any

class Sequence Any

class List Sequence

class Set Sequence

class Class Any

class Error Any

def null :
	if false

def true :
	<= 0 1

def false :
	<= 1 0

def assert condition message :
	if not condition
		throw message

def assert-that condition :
	assert condition 'Assertion failed'

def assert-equals a b :
	assert == a b
		concat list '!= ' a ' ' b

def not x :
	cond x false true

def all seq predicate :
	for x seq
		if not call predicate x
			return false
	true

def xor x y :
	cond x
		not y
		y

def lazy and a b :
	cond a
		b
		false

def lazy or a b :
	cond a
		true
		b

def lazy cond condition option1 option2 :
	if condition
		return option1
	else
		return option2

def neg x :
	* -1 x

def abs x :
	cond < x 0
		neg x 
		x 

def fact n :
	fact0 1 n

def fact0 m n :
	cond == n 0
		m
		fact0 * m n - n 1

def compose f g :
	λ x : call f call g x

def is-null x :
	== x null

def fold seq seed op :
	= result seed
	for x seq
		= result call op result x
	result

def sum seq :
	fold seq 0 ref +

def max seq :
	fold seq
		null
		λ x y :
			cond or < x y is-null x
				y
				x

def min seq :
	= result null
	for x seq
		if or is-null result < x result
			= result x
	result

def any seq predicate :
	for x seq
		if call predicate x
			return true
	false

def str obj :
	build-string out obj StringBuilder

def join seq prefix delimiter suffix :
	= builder StringBuilder
	out prefix builder
	= first true
	for i seq
		if not first
			out delimiter builder
		= first false
		out i builder
	out suffix builder
	str builder

def concat seq :
	join seq '' '' ''

def each seq consumer :
	for x seq
		call consumer x

def println x :
	print concat list x '\n'

def pi : 3.14159265358979323846

def infinity : / 1.0 0.0

def nan : / 0.0 0.0

def map seq f :
	if is-empty seq
		return seq
	cons
		call f head seq
		map tail seq f

def filter seq pred :
	if is-empty seq
		return seq
	lazy-seq
		cond call pred head seq
			cons head seq
				filter tail seq pred
			filter tail seq pred

def ints start :
	cons start ints + start 1

def keep seq count :
	cond or == count 0 is-empty seq
		list
		cons head seq keep tail seq - count 1

def drop seq count :
	if > count 0
		return drop tail seq - count 1
	seq

def zip seq1 seq2 f :
	cond or is-empty seq1 is-empty seq2
		list
		cons
			call f head seq1 head seq2
			zip tail seq1 tail seq2 f

def range start end :
	keep
		ints start
		- end start

def series f :
	map ints 0 f

def >= a b :
	<= b a

def == a b :
	and <= a b <= b a

def != a b :
	not == a b

def > a b :
	not <= a b

def < a b :
	>= b a

def append l x :
	insert l size l x

def prepend l x :
	insert l 0 x

def abstract :
	throw 'Abstract function'

def in o :
	abstract

method Sequence in o :
	o

class MutableList Any list

def mutable-list :
	MutableList list

def bind callable x1 :
	= n arg-count callable
	if == n 0
    	throw 'Function has no arguments'
	if == n 1
    	return λ :
    		call callable x1
	if == n 2
    	return λ x2 :
    		call callable x1 x2
	if == n 3
    	return λ x2 x3 :
    		call callable x1 x2 x3
	if == n 4
    	return λ x2 x3 x4 :
    		call callable x1 x2 x3 x4
	if == n 5
    	return λ x2 x3 x4 x5 :
    		call callable x1 x2 x3 x4 x5
	if == n 6
    	return λ x2 x3 x4 x5 x6 :
    		call callable x1 x2 x3 x4 x5 x6
	if == n 7
    	return λ x2 x3 x4 x5 x6 x7 :
    		call callable x1 x2 x3 x4 x5 x6 x7
	if == n 8
    	return λ x2 x3 x4 x5 x6 x7 x8 :
    		call callable x1 x2 x3 x4 x5 x6 x7 x8
	if == n 9
    	return λ x2 x3 x4 x5 x6 x7 x8 x9 :
    		call callable x1 x2 x3 x4 x5 x6 x7 x8 x9
	if == n 10
		return λ x2 x3 x4 x5 x6 x7 x8 x9 x10 :
			call callable x1 x2 x3 x4 x5 x6 x7 x8 x9 x10
	throw 'Too many arguments'

def size seq :
	= n 0
	for i seq
		= n + n 1
	n

def contains seq item :
	for i seq
		if == i item
			return true
	return false

def index seq item :
	= i 0
	for x seq
		if == x item
			return i
		= i + i 1
	-1

def sqr x :
	* x x

class Complex Any re im

method Complex + x y :
	Complex + re x re y + im x im y

method Complex - x y :
	Complex - re x re y - im x im y

method Complex * x y :
	Complex
		- * re x re y * im x im y
		+ * re x im y * re y im x

method Complex / x y :
	= d + sqr re y sqr im y
	Complex
		/ + * re x re y * im x im y d
		/ - * re y im x * re x im y d

method Complex neg x :
	Complex neg re x neg im x

def to-list seq :
	= result list
	for i seq
		= result append result i
	result

method Complex out obj dest :
	out re obj dest
	if != im obj 0
		if > im obj 0
			out '+' dest
		out im obj dest
		out 'i' dest

method List to-list seq :
	seq
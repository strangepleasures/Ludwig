package system

def not x :
	cond x false true

def != x y :
	not == x y

def xor x y :
	cond x
		not y
		y

def is-empty seq :
	has-next iterator seq

def head seq :
	next iterator seq

def neg x :
	* -1 x

def abs x :
	cond < x 0
		neg x 
		x 

def fact n :
	cond < n 2
		1
		* n fact - n 1

def compose f g :
	λ x : call f call g x

def is-null x :
	== x null

def fold seq seed op :
	= result seed
	for x seq
		= result call op result x
	result

def sum seq :
	fold seq 0 ref +

def max seq :
	fold seq
		null
		λ x y :
			cond or < x y is-null x
				y
				x

def any seq predicate :
	for x seq
		if call predicate x
			return true
	false

def all seq predicate :
	for x seq
		if not call predicate x
			return false
	true

def concat seq :
	join seq "" "" ""

def each seq consumer :
	for x seq
		call consumer x

def println x :
	print concat list x "\n"

= pi 3.14159265358979323846

= infinity / 1.0 0.0

= nan / 0.0 0.0

def map seq f :
	λ :
		= i iterator seq
		cond has-next i
			cons
				call f next i
				i
			eof

def filter seq p :
	λ :
		= i iterator seq
		while has-next i
			= r next i
			if call p r
				return cons r i
		eof

def ints start :
	λ : cons start iterator ints + start 1

def keep seq count :
	λ :
		= i iterator seq
		cond > count 0
			cons
				i
				keep
					\ : i
					- count 1
			eof

def range start end :
	keep
		ints start
		- end start

def series f :
	map ints 0 f
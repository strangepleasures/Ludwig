package system-tests

def test-assert :
	assert true 'Shouldn\'t fail'

def test-compose :
	= f compose ref exp λ x : sin x
	assert
		==
			call f 1
			exp sin 1
		'Function composition'

def test-range :
	= r range 0 10
	assert-equals 10 size r
	assert-equals 0 min r
	assert-equals 9 max r

def test-list :
	= a list 1 2 3
	assert-equals 3 size a
	assert-equals 1 get a 0
	assert-equals 2 get a 1
	assert-equals 3 get a 2

def test-map :
	= src list 1 2 3
	= dst to-list map src λ x : * x x
	assert-equals
		list 1 4 9
		dst

def test-lazy-sequences :
	= result null
	= n 1000000
	= seq map range 0 + n 1 λ x : x
	for i seq
		= result i
	assert-equals result n

def test-refs :
	= _exp ref exp
	assert-equals exp 1 call _exp 1
	= _fact ref fact
	assert-equals fact 5 call _fact 5

class Point1D Any x

class Point2D Point1D y

class Point3D Point2D z

def test-oop :
	= p2 Point2D 1 2
	assert-equals 2 dim p2
	= p3 Point3D 1 2 3
	assert-equals 3 dim p3

def test-class-refs :
	= factory ref Point3D
	= p call factory 1 2 3
	assert-equals 3 dim p

def dim o :
	abstract

method Point1D dim o :
	1

method Point2D dim o :
	+ super o 1

method Point3D dim o :
	+ super o 1

def test-str-object :
	assert-equals 'Point3D{x: 1, y: 2, z: 3}' str Point3D 1 2 3

def test-join :
	assert-equals
		'[a b c]'
		join
			list 'a' 'b' 'c'
			'['
			' '
			']'

def test-str :
	assert-equals '3+4i' str Complex 3 4

def fibs :
	_fibs 1 1

def _fibs a b :
	cons a cons b _fibs + a b + a * 2 b

def test-fibs :
	= f to-list keep fibs 7
	assert-equals
		list 1 1 2 3 5 8 13
		f

def fibo :
	cons 1 cons 1 zip fibo drop fibo 1 ref +

def test-fibo :
	= f to-list keep fibo 7
	assert-equals
		list 1 1 2 3 5 8 13
		f

def test-zip :
	= a range 1 6
	assert-equals
		list 1 4 9 16 25
		to-list zip a a ref *

def foo n :
	if == n 0
		return 0
	return foo - n 1

def test-tail-recursion :
	assert-equals 0 foo 100000